Task: set of program instructions loaded in memory.
Thread: unit of CPU utilization with its own program counter and stack.
Process: instance of a computer program that is being executed.

FreeRTOS: Task = Thread
FreeRTOS Task: Units of cpu utilization.


Hardware interrupt has the highest priority.


States:
Task Creation --> Ready  <-->  Running
                    ^             |
                    |             v
                      <------  Blocked

- When creating a task if task is blocked by another task it will remain at ready state.
- Suspended state: can be transitioned from every state, tasks can not be selected to run 
(as the block state) it can be resumed by explicitly calling vTaskResume(). Used to sleep tasks
when you don't want to rely on a timer.
  Methods: vTaskSuspend(), vTaskResume()

- Context switching: the scheduler remembers where a task left of and all of its working variables.

Task:
- Uses a portion of Heap memory.
- Each task has its own Stack and TCB (Task Control Block)
- TCB: keeps vital information of the task (ej: task priority level, location of the task's stack).
- Static tasks can be created in order to prevent memory leak (#define configSUPPORT_STATIC_ALLOCATION 1 ... xTaskCreateStatic()).


Queue:
FreeRTOS copies data by value, not by reference.
Since is atomic we can expect data integrity.


Mutex (Mutual Exclusion)


Semaphore
Producer: adds something to the shared resource, semaphoreGive(semaphore)
Consumer: removes something from the shared resource, semaphoreTake(mutex)